{"version":3,"sources":["App/components/SkillsFigure.js","App/screens/SkillsScreen.js"],"names":["SkillsFigure","className","id","type","name","defaultChecked","htmlFor","SkillsScreen","useEffect","document","title"],"mappings":"uKAEe,SAASA,IAEtB,OACE,yBAAQC,UAAU,OAAM,UACtB,uBACEC,GAAG,QACHC,KAAK,QACLC,KAAK,YACLH,UAAU,iBACVI,gBAAgB,IAElB,uBAAOC,QAAQ,QAAQL,UAAU,eAAc,SAAC,SAIhD,uBACEC,GAAG,QACHC,KAAK,QACLC,KAAK,YACLH,UAAU,mBAEZ,uBAAOK,QAAQ,QAAQL,UAAU,eAAc,SAAC,QAIhD,uBACEC,GAAG,QACHC,KAAK,QACLC,KAAK,YACLH,UAAU,mBAEZ,uBAAOK,QAAQ,QAAQL,UAAU,eAAc,SAAC,OAIhD,uBACEC,GAAG,QACHC,KAAK,QACLC,KAAK,YACLH,UAAU,mBAEZ,uBAAOK,QAAQ,QAAQL,UAAU,eAAc,SAAC,UAIhD,uBACEC,GAAG,QACHC,KAAK,QACLC,KAAK,YACLH,UAAU,mBAEZ,uBAAOK,QAAQ,QAAQL,UAAU,eAAc,SAAC,SAIhD,uBACEC,GAAG,QACHC,KAAK,QACLC,KAAK,YACLH,UAAU,mBAEZ,uBAAOK,QAAQ,QAAQL,UAAU,eAAc,SAAC,UAMhD,0BAASA,UAAU,UAAS,UAC1B,sBAAKA,UAAU,YAAW,UACxB,4BAAG,mWAOH,4BAAG,iiBASL,sBAAKA,UAAU,YAAW,UACxB,4BAAG,2XAOH,4BAAG,ojBASL,sBAAKA,UAAU,YAAW,UACxB,4BAAG,iNAIH,4BAAG,ktBAUL,sBAAKA,UAAU,YAAW,UACxB,4BAAG,2gBAQH,4BAAG,miBASL,sBAAKA,UAAU,YAAW,UACxB,4BAAG,ilBAQH,4BAAG,6eAQL,sBAAKA,UAAU,YAAW,UACxB,4BAAG,itBASH,4BAAG,sUASb,CCvKe,SAASM,IAKtB,OAJAC,qBAAU,WACRC,SAASC,MAAQ,+BACnB,GAAG,IAGD,0BAAST,UAAU,oBAAmB,UAEpC,0BAASA,UAAU,0BAAyB,UAC1C,wBAAQA,UAAU,iBAAgB,SAChC,6BAAI,0BAEN,oBAAGA,UAAU,oBAAmB,UAC9B,oBAAGA,UAAU,uBAAsB,UAAC,8GAEW,sBAAMS,MAAM,4BAA2B,SAAC,SAAY,KAAC,sBAAMA,MAAM,yBAAwB,SAAC,QAAU,IAChJ,sBAAMA,MAAM,qCAAqCT,UAAU,oBAAmB,SAAC,SAAW,kBAC1F,oBAAIA,UAAU,oBAAmB,SAAC,UAAU,QAAK,oBAAIA,UAAU,oBAAmB,SAAC,SAAS,mBAE/F,oBAAGA,UAAU,uBAAsB,UAAC,6GAET,sBAAMS,MAAM,qBAAoB,SAAC,QAAW,KAAC,sBAAMA,MAAM,uBAAsB,SAAC,QAAW,KAAC,sBAAMA,MAAM,sBAAqB,SAAC,OAAU,oEAEnK,mBAAGT,UAAU,uBAAsB,SAAC,qPAKpC,mBAAGA,UAAU,uBAAsB,SAAC,8FAMxC,yBAASA,UAAU,2BAA0B,SAC3C,cAACD,EAAY,QAKrB,C","file":"static/js/8.2bb14be5.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function SkillsFigure() {\n  \n  return (\n    <figure className=\"tabs\">\n      <input\n        id=\"tab-1\"\n        type=\"radio\"\n        name=\"radio-set\"\n        className=\"tab-selector-1\"\n        defaultChecked={true}\n      />\n      <label htmlFor=\"tab-1\" className=\"tabs-label-1\">\n        HTML\n      </label>\n\n      <input\n        id=\"tab-2\"\n        type=\"radio\"\n        name=\"radio-set\"\n        className=\"tab-selector-2\"\n      />\n      <label htmlFor=\"tab-2\" className=\"tabs-label-2\">\n        CSS\n      </label>\n\n      <input\n        id=\"tab-3\"\n        type=\"radio\"\n        name=\"radio-set\"\n        className=\"tab-selector-3\"\n      />\n      <label htmlFor=\"tab-3\" className=\"tabs-label-3\">\n        JS\n      </label>\n\n      <input\n        id=\"tab-4\"\n        type=\"radio\"\n        name=\"radio-set\"\n        className=\"tab-selector-4\"\n      />\n      <label htmlFor=\"tab-4\" className=\"tabs-label-4\">\n        React\n      </label>\n\n      <input\n        id=\"tab-5\"\n        type=\"radio\"\n        name=\"radio-set\"\n        className=\"tab-selector-5\"\n      />\n      <label htmlFor=\"tab-5\" className=\"tabs-label-5\">\n        Node\n      </label>\n\n      <input\n        id=\"tab-6\"\n        type=\"radio\"\n        name=\"radio-set\"\n        className=\"tab-selector-6\"\n      />\n      <label htmlFor=\"tab-6\" className=\"tabs-label-5\">\n        Redux\n      </label>\n\n      {/* <div className=\"clear-shadow\"></div> */}\n\n      <section className=\"content\">\n        <div className=\"content-1\">\n          <p>\n            HTML, or Hypertext Markup Language, is used to organize an application. \n            Through the use of various tags - such as header, div, nav, and ul - a programmer \n            is able to write clean, syntactic code that is highly logical and easy to follow. \n            Of course, this is only truly capable when a programmer has memorized the different \n            use cases of the various tags. \n          </p>\n          <p>\n            Throughout my various projects, you will find HTML implemented through both standard \n            syntax and in JSX. By developing a strong understanding of the markup, I have been able \n            to make my projects easier to read and follow so that I am able to easily decipher what \n            is going on in a file I havenâ€™t looked at in a while. It has also allowed me to organize \n            my work into code that sometimes has a variety of complex logic. Overall, HTML has allowed \n            me to write code in a way that both I and other programmers can easily read and understand.\n          </p>\n        </div>\n        <div className=\"content-2\">\n          <p>\n            CSS, or Cascading Style Sheets, is used to format an application. This ranges from relative \n            placement of divisions, colors, spacing, sizing; without it, our applications would simply \n            be a bore to look at. While mastering CSS takes incredible dedication and practice, there \n            is much that can be done by having a strong understanding of the fundamentals, such as the \n            box model.\n          </p>\n          <p>\n            Through different forms of implementation, I have been able to develop beautiful \n            web applications by simply writing CSS code. From animations on user events to cohesive color \n            choices to make a more enjoyable UX experience, I have effectively implemented CSS into all \n            of my applications. I have also taught myself to use SASS, or Syntactically Awesome Style Sheets, \n            to write more organized CSS code. I have found that the use of SASS has made my projects easier \n            to scale and manipulate, especially through the use of variables and the 7-1 directory pattern.\n          </p>\n        </div>\n        <div className=\"content-3\">\n          <p>\n            Although there are some nuance annoyances, the JavaScript language has a significant advantage \n            over other scripting languages: it allows for the development of applications on both the front and back end.\n          </p>\n          <p>\n            In order to build full stack applications, I have taken the necessary steps to become an efficient \n            programmer in JavaScript. Through the many built in methods, I have built fast, simple, and clean \n            applications with clear and easy to follow logic. In addition, I am able to solve relatively complex \n            algorithm problems using the language, most notably when taking into account the time and space complexity \n            of various solutions. JavaScript has allowed my full-stack applications to run seamlessly, and I have found \n            that the ability to write both the client side and back end in the same language has led to a significant \n            advantage, as I can easily make the entire stack readable to both myself and other programmers.\n          </p>\n        </div>\n        <div className=\"content-4\">\n          <p>\n            In order to build fast, scalable and intuitive applications, I chose to build my stacks using \n            the React framework. While many programmers choose to use the Angular framework, I have found \n            React to be the better alternative, especially due to its modern day use of components and ease \n            of use with APIs. In addition, I have found the integration of HTML and CSS into React components \n            through JSX to be incredibly powerful, easy to use, and logical, as I can organize my code and \n            keep logic wherever I find most rational.\n          </p>\n          <p>\n            Through the use of React, I have been able to build highly organized and intuitive applications. \n            By developing my own custom hooks, I have been able to make my components not only highly scalable, \n            but also reusable to build other projects rapidly with a uniform thought process. Furthermore, I \n            have built many applications using the built in hooks that come with React. From using useEffect \n            to create timers and delays, to useState to deal with component based state, my projects effectively \n            make use of the framework to its full capacity.\n          </p>\n        </div>\n        <div className=\"content-5\">\n          <p>\n            To build the backend of my projects using a uniform language throughout my stack, I chose to use Node.js. \n            As a single-threaded, event-driven JavaScript runtime, Node.js has allowed me to write highly-scalable and \n            fast code. This is all done by understanding how the event loop executes code asynchronously to handle new \n            connections and operations in a non-blocking way. This approach allows Node.js to use less memory than its \n            counterparts. In addition, I have found that the conventional use of routes, controllers, and middleware \n            has allowed for a logical and scalable directory system. \n          </p>\n          <p>\n            Through the use of the Express.js framework, I have incorporated Node.js as my backend environment for my \n            fullstack applications. It has allowed me to write intuitive backend code to handle API calls, interact with \n            databases, and communicate with clients through the integration of Nodemailer for emails and Mailchimp for \n            community newsletters. I have also learned to use the JavaScript runtime to handle authentication through JSON \n            web tokens to allow for a user / client environment. \n          </p>\n        </div>\n        <div className=\"content-6\">\n          <p>\n            To further make my stack scalable and organized, I have implemented Redux into my applications. The library \n            has allowed the client side of my projects to store state changes in a single location which, as projects \n            grow larger in size, has led to ease of state management across the component tree. While the store holds \n            the treeâ€™s state, the actions describe what happens to the application when they are called upon by reducer \n            functions. Although many components still have their own state for localized logic, the implementation of \n            Redux to hold state has made my projects cleaner, as there is no need to keep track of passing logic up and \n            down components and worry about the connectivity of the overall tree.\n          </p>\n          <p>\n            Throughout all of my full stack applications, I have made use of the power of Redux to handle my stack-wide \n            state. From handling interactions with databases on the client side, to holding logic on whether a modal is \n            open or not, I have found the use of Redux has made my applications rational and easily scalable.\n          </p>\n        </div>\n      </section>\n    </figure>\n  );\n}","import React, { useEffect } from \"react\";\n\n// components\nimport SkillsFigure from '../components/SkillsFigure'\n\n\nexport default function SkillsScreen() {\n  useEffect(() => {\n    document.title = \"Toshi Kellogg | Web Developer\";\n  }, [])\n\n  return (\n    <section className=\"skills__container\">\n\n      <section className=\"skills__container--left\">\n        <header className=\"skills__header\">\n          <h1>Skills & Experience</h1>\n        </header>\n        <p className=\"skills__paragraph\">\n          <p className=\"skills__paragraph--1\">\n            My expertise is building web applications using a MERN stack.\n            I have extensive knowledge and experience in <abbr title=\"HyperText Markup Language\">HTML</abbr>, <abbr title=\"Cascading Style Sheets\">CSS</abbr>\n            (<abbr title=\"Syntactically Awesome Style Sheets\" className=\"skills__blue-text\">SASS</abbr>), JavaScript \n            (<em className=\"skills__blue-text\">React</em> and <em className=\"skills__blue-text\">Node</em>), and Redux.\n          </p>\n          <p className=\"skills__paragraph--2\">\n            I am also able to solve algorithm problems using all of the standard strategies. \n            These include recursion, <abbr title=\"Depth-First Search\">DFS</abbr>, <abbr title=\"Breadth-First Search\">BFS</abbr>, <abbr title=\"Dynamic Programming\">DP</abbr>, binary search, hash tables, arrays, and string manipulation.\n          </p>\n          <p className=\"skills__paragraph--3\">\n            I enjoy writing code cleanly, and through my ability to patiently observe and learn from other programmersâ€™ \n            work, I am able to write code following a uniform pattern, which is both necessary and highly effective for \n            large-scale stacks.\n          </p>\n          <p className=\"skills__paragraph--4\">\n            Please check out my projects to learn more about what I have created in JavaScript.\n          </p>\n        </p>\n      </section>\n\n      <section className=\"skills__container--right\">\n        <SkillsFigure />\n      </section>\n      \n    </section>\n  );\n}"],"sourceRoot":""}